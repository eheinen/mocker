// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	person "mocker/example/person"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// ExecutePerson provides a mock function with given fields:
func (_m *Repository) ExecutePerson() {
	_m.Called()
}

// FindPerson provides a mock function with given fields:
func (_m *Repository) FindPerson() (*person.Person, error) {
	ret := _m.Called()

	var r0 *person.Person
	if rf, ok := ret.Get(0).(func() *person.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*person.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostPerson provides a mock function with given fields: _a0, ctx
func (_m *Repository) PostPerson(_a0 person.Person, ctx context.Context) error {
	ret := _m.Called(_a0, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(person.Person, context.Context) error); ok {
		r0 = rf(_a0, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePerson provides a mock function with given fields: _a0, ctx
func (_m *Repository) UpdatePerson(_a0 person.Person, ctx context.Context) error {
	ret := _m.Called(_a0, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(person.Person, context.Context) error); ok {
		r0 = rf(_a0, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
